#########################################################
# Define the main deployment of the app
#########################################################

fullnameOverride: ""

# Image and any required credentials to download it for the default deployment
image:
  image: ""
  pullPolicy: Always
  credentials:
    create: false
    username: ""
    password: ""
    secretRef: ""

# Default security context
securityContext:
  allowPrivilegeEscalation: false
  runAsNonRoot: true
  privileged: false
  capabilities:
    drop: ["ALL"]
  runAsGroup: 1050
  runAsUser: 1050

podSecurityContext:
  fsGroup: 1050
  seccompProfile:
    type: RuntimeDefault

# Specify image pull secrets if required or if you have it creating registry credentials
# imagePullSecrets: 
# - name: Release.name--registry-secret

# Enable deployment - by default we enable a simple deployment
deployment: 
  enabled: false
  # command: "sh"
  # args: []

# Configure the number of pods for this service.  If autoscale is enabled, replica count is not used.
replicaCount: 1
autoscale:
  enabled: false
  minPods: 2
  maxPods: 4
  cpuAverageUtilizationThreshold: 70

# Configure PodDisruptionBudget
podDisruptionBudget:
  enabled: false

# Enable and configure a service
service:
  enabled: false
  type: ClusterIP
  port: 8081

# Configure resources it will be given
resources:
 limits:
   memory: "500Mi"
 requests:
   cpu: "50m"
   memory: "25Mi"

# pod liveness and readiness probes to check the applications health
# https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
livenessProbe: {}
  # httpGet:
  #   path: /health
  #   port: 8080
  #   httpHeaders:
  #   - name: Custom-Header
  #     value: Awesome
  # initialDelaySeconds: 3
  # periodSeconds: 3

readinessProbe: {}

# Configure vault agent init container to pull secrets from vault
vaultAgent:
  enabled: false
  clusterName: ""
  namespace: ""
  role: ""
  secrets: []
    # - type: env
    #   secretName: init
    #   filename: init
    # - type: raw
    #   secretName: init
    #   filename: init
    # - type: configmap
    #   configMapRef: init


# List key/value pairs to be included in this service's ConfigMap
configData: {}

# Set secret data key-value pairs that will be loaded into env variables
secretData: {}

# List of files to load into configmaps.  Supports glob patterns, all files that match will be put into the configmap
configFiles:
  - fileGlob: files/upstream.toml
    configMapName: config.toml

# List of extra annotations to be injected into this service's ConfigMap
configExtraAnnotations: {}

# List of extra annotations to be injected into pod templates
extraAnnotations: {}

# See https://kubernetes.io/docs/concepts/storage/volumes/
volumes: []
  # - name: mydir
  #   hostPath:
  #     # Ensure the file directory is created.
  #     path: /var/local/aaa
  #     type: DirectoryOrCreate

volumeMounts: []
  # - name: myvolume
  #   mountPath: /mount

# See https://kubernetes.io/docs/concepts/storage/persistent-volumes/
persistentVolumeClaims:
  # - name: efs
  #   accessMode: ReadWriteMany
  #   storageClass: efs-cats-prod
  #   size: 50Gi

# Possibly select a certain type of node
nodeSelector: {}

# Set tolerations
tolerations: []

# Set pod affinity
affinity: {}

# sets whether containers get the kubernetes generated env vars for addresses to other services in the same namespace
enableServiceLinks: true

###########
# Ingress #
###########

# Deploys a Kubernetes Ingress resource, defaults to nginx ingress controller.
# If networking.k8s.io/v1 is available in your cluster that will be used,
# otherwise fall back to networking.k8s.io/v1
k8sIngress:
  enabled: false
  hosts: []
    # Add lists of hosts
    # - example.local
    #- "localhost"
  path: /
  annotations:
    # kubernetes.io/ingress.class: gce
    kubernetes.io/ingress.class: nginx
    # nginx.ingress.kubernetes.io/ssl-redirect: "false"
    # kubernetes.io/ingress.allow-http: false
    # kubernetes.io/tls-acme: true
  tls: []
    # Secrets must be manually created in the namespace.
    # - secretName: dash-certificate
    #   hosts:
    #     - example.local

# Deploys an Istio VirtualService and DestinationRule
istio:
  enabled: false
  gateways: []
  hosts: []
  paths: []
  loadBalancerType: ROUND_ROBIN
  useCustomLoadBalancer: false
  customLoadBalancer: {}
    # consistentHash:
    #   httpCookie:
    #     name: my_cookie_name
    #     ttl: 300s
  mtls:
    enabled: false
  # optional blocking for certain hosts or host/path combinations.  any matches here will return a 404
  blocked:
    enabled: false
    gateways: []
    hosts: []
    paths: []

#########################################################
# Stateful Sets                                         #
#########################################################

statefulSets:
  enabled: false
  statefulsets: []
    # - name: abcd
    #   image: nginx
    #   port: 4000
    #   serviceType: "ClusterIP"
    #   replicaCount: 1
    #   command: "sh"
    #   args: []
    #   volumes: []
    #   volumeMounts: []
    #   env: {} # additional env vars
    #   securityContext: {}

#############################################################
# Additional Deployments                                    #
#############################################################

extraDeployment:
  enabled: false
  hpaExtra: # autoscaling
    enabled: false
  deployments: []
    # - name: abcde
    #   image: nginx
    #   port: 4000
    #   targetPort: 8080
    #   serviceType: "ClusterIP"
    #   replicaCount: 1
    #   command: "sh"
    #   args: []
    #   volumes: []
    #   volumeMounts: []
    #   env: {} # additional env vars
    #   securityContext: {}
    #   
    #   minPods: 2
    #   maxPods: 4
    #   cpuAverageUtilizationThreshold: 70


############
# CronJobs #
############

cronJobs:
  enabled: false
  scheduled: []
    # - name: abc
    #   image: nginx
    #   schedule: "30 * * * *" # every 30 min
    #   command: "sh"
    #   args: []
    #   volumes: []
    #   volumeMounts: []
    #   env: {} # additional env vars
    #   securityContext: {}

########
# Jobs #
########

jobs:
  enabled: false
  jobs: []
    # - name: hgu
    #   image: nginx
    #   command: "sh"
    #   #args: []
    #   #volumes: []
    #   #volumeMounts: []
    #   #env: {} # additional env vars
    #   #extraAnnotations: {} # additional annotations
    #   securityContext: {}

############
# SideCars #
############
sidecars:
  enabled: false
  sidecars:
    - name: sidecarname
      enabled: true
      image: /sidecarname # added on to image registry path to form the container images. Tag must be same as main app's tag.
      containerPort: 8080
      volumeMounts: []
      #- name: nfsdata
      #  mountPath:
      #  readOnly: false
      command: ls
      resources:
        limits:
          memory: 500Mi
        requests:
          cpu: 100m
          memory: 256Mi
      livenessProbe:
        httpGet:
          path: /healthz
          port: 8080
        initialDelaySeconds: 30
        periodSeconds: 10
        failureThreshold: 5
        timeoutSeconds: 5
      readinessProbe:
        httpGet:
          path: /healthz
          port: 8080
        initialDelaySeconds: 30
        periodSeconds: 10
        failureThreshold: 5
        timeoutSeconds: 5

###################
# init containers #
###################
# initContainers would be used to add additional initContainers into the deployment (but not crons or workers). Mostly used for webservers.
initContainers:
  enabled: false
  initContainers:
  - name: initContainername
    image: "" # added on to image registry path to form the container images. Tag must be same as main app's tag.
    volumeMounts: []
    #- name: nfsdata
    #  mountPath:
    #  readOnly: false
    resources:
      limits:
        memory: 500Mi
      requests:
        cpu: 100m
        memory: 256Mi

############
# Postgres #
############
postgres:
  enabled: false
  image: postgres
  tag: alpine3.17
  requests:
    cpu: "250m"
    memory: "256Mi"

#########
# Kafka #
#########
kafka:
  enabled: false
  extraAnnotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "1"
    topics: {}
  #   - name: topic-resource-name
  #     partitions: 1
  #     replicas: 1
  #     topicName: topic_name
  #     config:
  #       compression.type: "producer"


##################
# Extra Services #
##################
extraServices:
  enabled: false
  # services:
  #   - name: zookeeper-srv
  #     type: ClusterIP
  #     ports:
  #       - name: server
  #         port: 2888
  #         protocol: TCP
  #         targetPort: 2888
  #       - name: leader-election
  #         port: 3888
  #         protocol: TCP
  #         targetPort: 3888
  #     selector: 
  #       app: zookeeper

#########################
# Extra VirtualServices #
#########################
extraVirtualService:
  enabled: false
  virtualServices:
  - name: something
    gateways: []
    hosts: []
    paths: []
    loadBalancerType: ROUND_ROBIN
    useCustomLoadBalancer: false
    customLoadBalancer: {}
      # consistentHash:
      #   httpCookie:
      #     name: my_cookie_name
      #     ttl: 300s
    mtls:
      enabled: false
    # optional blocking for certain hosts or host/path combinations.  any matches here will return a 404
    blocked:
      enabled: false
      gateways: []
      hosts: []
      paths: []